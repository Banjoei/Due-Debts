import flixel.FlxG;
import flixel.util.FlxTimer;
import funkin.play.PlayState;
import funkin.play.PauseSubState;
import funkin.graphics.FunkinSprite;
import funkin.play.character.SparrowCharacter;
import funkin.play.GameOverSubState;
import StringTools;

class BoyfriendBlazinCharacter extends SparrowCharacter {
	function new() {
		super('bf-blazin');
	}

	function onCreate(event:ScriptEvent) {
		super.onCreate(event);
	}

	var cantUppercut = false;

	function onNoteHit(event:HitNoteScriptEvent) {
		holdTimer = 0;

		// SPECIAL CASE: If Boyfriend hits a poor note at low health (at 30% chance),
		// Boyfriend may instead punch high (but Darnell will duck below Boyfriend to attempt an uppercut)
		// NOTE: This relies on scripts dispatching to opponents first, which is true at time of writing.
		var shouldDoUppercutPrep = wasNoteHitPoorly(event) && isPlayerLowHealth() && isDarnellPreppingUppercut();

		if (shouldDoUppercutPrep) {
			playPunchHighAnim();
			return;
		}

		if (cantUppercut) {
			playBlockAnim();
			cantUppercut = false;
			return;
		}

		var dir = event.note.noteData.getDirection();

		// Override the hit note animation.
		switch (event.note.kind) {
			case "weekend-1-bfnote":
				if (dir == 0) {
					playPunchHighAnim();
				} else if (dir == 1) {
					playPunchLowAnim();
				} else if (dir == 2) {
					playDodgeAnim();
				} else if (dir == 3) {
					playBlockAnim();
				}
			case "weekend-1-bftaunt":
				playTauntAnim();
			case "weekend-1-darnellhitnote":
				if (dir == 1 || dir == 0) {
					playPunchHighAnim();
				} else if (dir == 2 || dir == 3) {
					playPunchLowAnim();
				}
			case "weekend-1-bfstylenote":
				playSingingAnims(dir, false, 'alt');
			case "weekend-1-bfuppercut":
				if (PlayState.instance.currentVariation == 'bf') {
					if (dir == 0 || dir == 3) {
						playPunchHighAnim();
					} else if (dir == 1) {
						playUppercutPrepAnim();
					} else if (dir == 2) {
						playUppercutAnim();
					}
				} else {
					playUppercutAnim(true);
				}
			case "weekend-1-darnelluppercut":
				if (PlayState.instance.currentVariation == 'bf') {
					if (dir == 0 || dir == 3) {
						playHitSpinAnim();
					} else if (dir == 1) {
						playIdleAnim();
					} else if (dir == 2) {
						playUppercutHitAnim();
					}
				} else {
					playUppercutHitAnim();
				}
			case "weekend-1-bfhitnote":
				lolGetFucked(dir);
			case "nothing":
				return;

			// Script from pico-blazin.hxc for compatability with original chart
			case "weekend-1-punchlow":
				playPunchLowAnim();
			case "weekend-1-punchlowblocked":
				playPunchLowAnim();
			case "weekend-1-punchlowdodged":
				playPunchLowAnim();
			case "weekend-1-punchlowspin":
				playPunchLowAnim();

			case "weekend-1-punchhigh":
				playPunchHighAnim();
			case "weekend-1-punchhighblocked":
				playPunchHighAnim();
			case "weekend-1-punchhighdodged":
				playPunchHighAnim();
			case "weekend-1-punchhighspin":
				playPunchHighAnim();

			case "weekend-1-blockhigh":
				playBlockAnim(event.judgement);
			case "weekend-1-blocklow":
				playBlockAnim(event.judgement);
			case "weekend-1-blockspin":
				playBlockAnim(event.judgement);

			case "weekend-1-dodgehigh":
				playDodgeAnim();
			case "weekend-1-dodgelow":
				playDodgeAnim();
			case "weekend-1-dodgespin":
				playDodgeAnim();

			// Boyfriend ALWAYS gets punched.
			case "weekend-1-hithigh":
				playHitHighAnim();
			case "weekend-1-hitlow":
				playHitLowAnim();
			case "weekend-1-hitspin":
				playHitSpinAnim();

			case "weekend-1-picouppercutprep":
				playUppercutPrepAnim();
			case "weekend-1-picouppercut":
				playUppercutAnim(true);

			case "weekend-1-darnelluppercutprep":
				playIdleAnim();

			case "weekend-1-idle":
				playIdleAnim();
			case "weekend-1-fakeout":
				playFakeoutAnim();
			case "weekend-1-taunt":
				playTauntConditionalAnim();
			case "weekend-1-tauntforce":
				playTauntAnim();
			case "weekend-1-reversefakeout":
				playIdleAnim(); // TODO: Which anim?
			default:
				playSingingAnims(dir, false, '');
		}
	}

	function playAnimation(name:String, restart:Bool, ignoreOther:Bool) {
		super.playAnimation(name, restart, ignoreOther);
	}

	function onNoteMiss(event:NoteScriptEvent) {
		holdTimer = 0;

		// SPECIAL CASE: Darnell prepared to uppercut last time and Pico missed! FINISH HIM!
		if (isDarnellInUppercut()) {
			playUppercutHitAnim();
			return;
		}

		if (willMissBeLethal(event)) {
			playHitLowAnim();
			return;
		}

		if (cantUppercut) {
			playHitHighAnim();
			return;
		}

		var dir = event.note.noteData.getDirection();

		// Override the hit note animation.
		switch (event.note.kind) {
			case "weekend-1-bfnote":
				lolGetFucked(dir);
			case "weekend-1-bftaunt":
				playTauntAnim();
			case "weekend-1-darnellhitnote":
				lolGetFucked(dir);
			case "weekend-1-bfstylenote":
				lolGetFucked(dir);
			case "weekend-1-bfuppercut":
				if (PlayState.instance.currentVariation == 'bf') {
					if (dir == 0 || dir == 3) {
						playPunchHighAnim();
					} else if (dir == 1) {
						playUppercutPrepAnim();
					} else if (dir == 2) {
						playUppercutAnim();
					}
				} else {
					playUppercutAnim(true);
				}
			case "weekend-1-darnelluppercut":
				if (PlayState.instance.currentVariation == 'bf') {
					if (dir == 0 || dir == 3) {
						playHitSpinAnim();
					} else if (dir == 1) {
						playIdleAnim();
					} else if (dir == 2) {
						playUppercutHitAnim();
					}
				} else {
					playUppercutHitAnim();
				}
			case "weekend-1-bfhitnote":
				lolGetFucked(dir);

			// Script from pico-blazin.hxc for compatability with original chart
			// Boyfriend fails to punch, and instead gets hit!
			case "weekend-1-punchlow":
				playHitLowAnim();
			case "weekend-1-punchlowblocked":
				playHitLowAnim();
			case "weekend-1-punchlowdodged":
				playHitLowAnim();
			case "weekend-1-punchlowspin":
				playHitSpinAnim();

			// Boyfriend fails to punch, and instead gets hit!
			case "weekend-1-punchhigh":
				playHitHighAnim();
			case "weekend-1-punchhighblocked":
				playHitHighAnim();
			case "weekend-1-punchhighdodged":
				playHitHighAnim();
			case "weekend-1-punchhighspin":
				playHitSpinAnim();

			// Boyfriend fails to block, and instead gets hit!
			case "weekend-1-blockhigh":
				playHitHighAnim();
			case "weekend-1-blocklow":
				playHitLowAnim();
			case "weekend-1-blockspin":
				playHitSpinAnim();

			// Boyfriend fails to dodge, and instead gets hit!
			case "weekend-1-dodgehigh":
				playHitHighAnim();
			case "weekend-1-dodgelow":
				playHitLowAnim();
			case "weekend-1-dodgespin":
				playHitSpinAnim();

			// Boyfriend ALWAYS gets punched.
			case "weekend-1-hithigh":
				playHitHighAnim();
			case "weekend-1-hitlow":
				playHitLowAnim();
			case "weekend-1-hitspin":
				playHitSpinAnim();

			// Fail to dodge the uppercut.
			case "weekend-1-picouppercutprep":
				playPunchHighAnim();
				cantUppercut = true;
			case "weekend-1-picouppercut":
				playUppercutAnim(false);

			// Darnell's attempt to uppercut, Boyfriend dodges or gets hit.
			case "weekend-1-darnelluppercutprep":
				playIdleAnim();
			case "weekend-1-darnelluppercut":
				playUppercutHitAnim();

			case "weekend-1-idle":
				playIdleAnim();
			case "weekend-1-fakeout":
				playHitHighAnim();
			case "weekend-1-taunt":
				playTauntConditionalAnim();
			case "weekend-1-tauntforce":
				playTauntAnim();
			case "weekend-1-reversefakeout":
				playIdleAnim();

			default:
				trace('Unknown note kind: ' + event.note.kind);
		}
	}

	function willMissBeLethal(event:NoteScriptEvent):Bool {
		return (PlayState.instance.health + event.healthChange) <= 0.0;
	}

	function onNoteGhostMiss(event:GhostMissNoteScriptEvent) {
		if (willMissBeLethal(event)) {
			// Darnell throws a punch so that Pico dies.
			playHitLowAnim();
		} else {
			// Pico wildly throws punches but Darnell dodges.
			playPunchHighAnim();
		}
	}

	override function onAnimationFinished(name:String) {
		super.onAnimationFinished(name);
	}

	override function onSongRetry() {
		super.onSongRetry();
		cantUppercut = false;
		playIdleAnim();
	}

	function getDarnell() {
		if (this.debug)
			return null;
		return PlayState.instance.currentStage.getDad();
	}

	function moveToBack() {
		if (this.debug)
			return;
		this.zIndex = 2000;
		PlayState.instance.currentStage.refresh();
	}

	function moveToFront() {
		if (this.debug)
			return;
		this.zIndex = 3000;
		PlayState.instance.currentStage.refresh();
	}

	function isDarnellPreppingUppercut():Void {
		return getDarnell().getCurrentAnimation() == 'uppercutPrep';
	}

	function isDarnellInUppercut():Void {
		return getDarnell().getCurrentAnimation() == 'uppercut' || getDarnell().getCurrentAnimation() == 'uppercut-hold';
	}

	function wasNoteHitPoorly(event:HitNoteScriptEvent):Bool {
		return (event.judgement == "bad" || event.judgement == "shit");
	}

	function isPlayerLowHealth(event:HitNoteScriptEvent):Bool {
		return PlayState.instance.health <= 0.30 * 2.0;
	}

	// ANIMATIONS
	var alternate:Bool = false;

	function doAlternate():String {
		alternate = !alternate;
		return alternate ? '1' : '2';
	}

	function playBlockAnim(?judgement:String) {
		// on sick block, do a 3rd strike esque "tech" effect
		if (judgement == 'sick') {
			// var blendAnims:Array<Int> = [10, 0, 10, 0, 0, 10, 0, 0, 10, 0, 10];
			//
			// for (blendMode in 0...blendAnims.length)
			// {
			//	new FlxTimer().start(blendMode / 60, function(_) {
			//
			//		if (blendAnims[blendMode] != 10)
			//			this.color = 0xFF0000FF;
			//		else
			//			this.color = 0xFFFFFFFF;
			//
			//		this.blend = blendAnims[blendMode];
			//	});
			// }
		}

		this.playAnimation('block', true, false);
		PlayState.instance.camGame.shake(0.002, 0.1);
		moveToBack();
	}

	function playCringeAnim() {
		this.playAnimation('cringe', true, false);
		moveToBack();
	}

	function playDodgeAnim() {
		this.playAnimation('dodge', true, false);
		moveToBack();
	}

	function playIdleAnim() {
		this.playAnimation('idle', false, false);
		moveToBack();
	}

	function playFakeoutAnim() {
		this.playAnimation('fakeout', true, false);
		moveToBack();
	}

	function playUppercutPrepAnim() {
		this.playAnimation('uppercutPrep', true, false);
		moveToFront();
	}

	function playUppercutAnim(hit:Bool) {
		this.playAnimation('uppercut', true, false);
		if (hit) {
			PlayState.instance.camGame.shake(0.005, 0.25);
		}
		moveToFront();
	}

	function playUppercutHitAnim() {
		this.playAnimation('uppercutHit', true, false);
		PlayState.instance.camGame.shake(0.005, 0.25);
		moveToBack();
	}

	function playHitHighAnim() {
		this.playAnimation('hitHigh', true, false);
		PlayState.instance.camGame.shake(0.0025, 0.15);
		moveToBack();
	}

	function playHitLowAnim() {
		this.playAnimation('hitLow', true, false);
		PlayState.instance.camGame.shake(0.0025, 0.15);
		moveToBack();
	}

	function playHitSpinAnim() {
		this.playAnimation('hitSpin', true, false, true);
		PlayState.instance.camGame.shake(0.0025, 0.15);
		moveToBack();
	}

	function playPunchHighAnim() {
		this.playAnimation('punchHigh' + doAlternate(), true, false);
		moveToFront();
	}

	function playPunchLowAnim() {
		this.playAnimation('punchLow' + doAlternate(), true, false);
		moveToFront();
	}

	function playTauntConditionalAnim() {
		if (getCurrentAnimation() == "fakeout") {
			playTauntAnim();
		} else {
			playIdleAnim();
		}
	}

	function playTauntAnim() {
		this.playAnimation('hey', true, false);
		moveToBack();
	}

	function playSingingAnims(dir:NoteDirection, missed:Bool, suffix:String):Void {
		this.playSingAnimation(dir, missed, suffix);
		moveToBack();
		this.holdTimer = 0;
	}

	function lolGetFucked(dir:NoteDirection) {
		if (dir == 1 || dir == 0) {
			playHitHighAnim();
		} else if (dir == 2 || dir == 3) {
			playHitLowAnim();
		}
	}
}