import funkin.play.PlayState;
import funkin.Conductor;
import flixel.FlxG;
import flixel.FlxCamera;
import funkin.modding.PolymodErrorHandler;
import funkin.play.event.SongEvent;
import funkin.play.event.ScriptedSongEvent;
import flixel.util.FlxSave;
import flixel.util.FlxTimer;
import flixel.tweens.FlxTween;
import flixel.tweens.FlxEase;
import funkin.modding.module.ModuleHandler;
import funkin.modding.module.ScriptedModule;
import funkin.data.event.SongEventRegistry;
import funkin.ui.transition.StickerSubState;

class CameraMovementFixes extends ScriptedModule {
    public function new(){
        super('CameraMovementFixes');
    }

    public var offset:Float = 0;
    public var sped:Float = 0;
    public var active:Bool = false;

    function follow(dir:NoteDirection):Void {
        if (!active || PlayState.instance == null || PlayState.instance.currentStage == null) return;
        var x:Float = 0;
        var y:Float = 0;
        var coolCam:FlxTimer = new FlxTimer();
        var cameraSpeed:Float;
        var bf = PlayState.instance.currentStage.getBoyfriend();

        if (dir != null) {
            if (dir == 0) {
                x = -offset;
            } else if (dir == 1) {
                y = offset;
            } else if (dir == 2) {
                y = -offset;
            } else if (dir == 3) {
                x = offset;
            }
            coolCam.start(
                Conductor.instance.stepLengthMs * (0.0011) * PlayState.instance.currentStage.getBoyfriend().singTimeSteps,
                function(timer:FlxTimer):Void {
                    follow();
                }
            );
            cameraSpeed = sped;
        } else {
            coolCam.cancel();
        }
        var duration:Float = 1.7 / cameraSpeed + 0.25;
        FlxTween.tween(PlayState.instance.camGame.targetOffset, {x: x}, duration, {ease: FlxEase.linear});
        FlxTween.tween(PlayState.instance.camGame.targetOffset, {y: y}, duration, {ease: FlxEase.linear});
    }

    public function onSubStateOpenBegin(event):Void {
        super.onSubStateOpenBegin(event);

        if (Std.isOfType(event.targetState, StickerSubState)) {
            active = false;
            var offset = 0;
            var sped = 0;
        }
    }

    override function onNoteHit(event:HitNoteScriptEvent) {
        var dir = event.note.noteData.getDirection();
        follow(dir);
    }

    override function onNoteMiss(event:HitNoteScriptEvent) {
        var dir = event.note.noteData.getDirection();
        follow(dir);
    }

    override function onNoteGhostMiss(event:HitNoteScriptEvent) {
        var dir = event.dir;
        follow(dir);
    }
}

class CameraMovementEvent extends ScriptedSongEvent {
    function new() {
        super('CameraMovement');
    }

    public var eventTitle:String = "Camera Movement";

    public var position:Float = 3.5;
    public var speed:Float = 10;

    override function handleEvent(data) {
        var rawV1 = data.getString("v1");
        var rawV2 = data.getString("v2");

        speed = (rawV1 == null || rawV1 == "") ? 3.5 : Std.parseFloat(rawV1);
        position = (rawV2 == null || rawV2 == "") ? 10 : Std.parseFloat(rawV2);

        var fixes = ModuleHandler.getModule('CameraMovementFixes');
        fixes.scriptSet('sped', speed);
        fixes.scriptSet('offset', position);
        fixes.scriptSet('active', true);
    }

    override function getTitle() {
        return eventTitle;
    }

    override function getEventSchema() {
        return [
            {
                name: 'v1',
                title: 'Camera Speed',
                defaultValue: 3.5,
                step: 0.25,
                type: "float"
            },
            {
                name: 'v2',
                title: 'Camera Movement Offset',
                defaultValue: 10,
                step: 0.5,
                type: "float"
            }
        ];
    }
}