import flixel.FlxG;
import flixel.tweens.FlxTween;
import flixel.tweens.FlxEase;
import flixel.util.FlxTimer;
import funkin.play.song.Song;
import funkin.play.PlayState;
import funkin.play.cutscene.VideoCutscene;
import funkin.modding.base.ScriptedMusicBeatSubState;
import funkin.modding.module.ModuleHandler;
import funkin.graphics.FunkinSprite;
import funkin.play.GameOverSubState;
import funkin.play.cutscene.CutsceneType;
import funkin.play.PlayStatePlaylist;
import funkin.save.Save;

/**
 * Apply middlescroll to the song.
 */
class BlazinSong extends Song {
	public function new() {
		super('blazin');

		this.hasHidden = false;
		this.hasPlayedCutscene = false;
	}

	var startblack:FunkinSprite;

	function onCreate(event:ScriptEvent):Void {
		super.onCreate(event);

		this.hasHidden = false;
		this.hasPlayedCutscene = false;

		if (PlayState.instance.currentVariation == "bf") {
			for (element in getHudElements()) {
				try {
					element.alpha = 0;
					element.visible = false;
				} catch (e:Dynamic) {}
			}
			// Create first black sprite (HUD Layer)
			startblack = new FunkinSprite(0, 0);
			startblack.makeSolidColor(FlxG.width + 10, FlxG.height + 10, 0xFF000000);
			startblack.updateHitbox();
			startblack.scrollFactor.set(); // Lock sprite to the screen
			startblack.cameras = [PlayState.instance.camHUD]; // Draw over HUD
			startblack.screenCenter();
			startblack.alpha = 1;
			PlayState.instance.add(startblack);
		}
	}

	override function onGameOver() {
		if (PlayState.instance.currentVariation == "bf") {
			for (element in getHudElements()) {
				try {
					element.alpha = 0;
					element.visible = false;
				} catch (e:Dynamic) {}
			}

			startblack.alpha = 1;
		}
	}

	function onDestroy(event:ScriptEvent):Void {
		super.onDestroy(event);

		this.hasHidden = false;
	}

	public function listDifficulties(variationId:String, variationIds:Array<String>, showLocked:Bool):Array<String> {
		if (showLocked || Save.instance.hasBeatenLevel('weekend1')) {
			return super.listDifficulties(variationId, variationIds);
		}

		// Hide all difficulties if the player has not beaten the week.
		return [];
	}

	var hasHidden = false;
	var hasPlayedCutscene:Bool = false;
	var needsRestart:Bool;

	function onUpdate(event:ScriptEvent):Void {
		super.onUpdate(event);

		var module = ModuleHandler.getModule('blazinDeathCutscene');

		if (!this.hasHidden) {
			this.hasHidden = true;
			hideOpponentStrumline();
			centerPlayerStrumline();
		}

		if (module.scriptGet("finished") == true) {
			module.scriptSet("finished", false);

			var darnell = PlayState.instance.currentStage.getDad();
			var fakeDarnell = PlayState.instance.currentStage.getNamedProp('fakeDarnell');

			for (element in getHudElements()) {
				try {
					FlxTween.cancelTweensOf(element);
					element.alpha = 0;
					element.visible = false;
				} catch (e:Dynamic) {}
			}

			if (startblack.alpha != 1) {
				FlxTween.cancelTweensOf(startblack);
				startblack.alpha = 1;
			}

			if (!darnell.visible) {
				darnell.visible = true;
				fakeDarnell.visible = false;
			}

			if (PlayState.instance.cameraFollowPoint.x != 1403 || PlayState.instance.cameraFollowPoint.y != 731) {
				PlayState.instance.cancelCameraFollowTween();
				PlayState.instance.cameraFollowPoint.setPosition(1403, 731);
			}

			if (PlayState.instance.currentCameraZoom != 0.75) {
				PlayState.instance.cancelAllCameraTweens();
				PlayState.instance.tweenCameraZoom(0.75, 0.5, FlxEase.linear);
			}
		}
	}

	function onPause(event:ScriptEvent):Void {
		super.onPause(event);

		if (PlayState.instance.currentVariation == "bf") {
			FlxTween.globalManager.forEach((tween:FlxTween) -> tween.active = false);
			FlxTimer.globalManager.forEach((timer:FlxTimer) -> timer.active = false);
		}
	}

	function onResume(event:ScriptEvent):Void {
		super.onResume(event);

		if (PlayState.instance.currentVariation == "bf") {
			FlxTween.globalManager.forEach((tween:FlxTween) -> tween.active = true);
			FlxTimer.globalManager.forEach((timer:FlxTimer) -> timer.active = true);
		}
	}

	override function onSongRetry(event):Void {
		super.onSongRetry(event);

		if (PlayState.instance.currentVariation == "bf") {
			var darnell = PlayState.instance.currentStage.getDad();
			var fakeDarnell = PlayState.instance.currentStage.getNamedProp('fakeDarnell');

			for (element in getHudElements()) {
				if (element != null) {
					try {
						if (element.alpha != 0) {
							FlxTween.cancelTweensOf(element);
							FlxTween.tween(element, {alpha: 0}, 0.5, {ease: FlxEase.linear});
							new FlxTimer().start(0.5, () -> {
								try {
									element.visible = false;
								} catch (e:Dynamic) {}
							});
						}
					} catch (e:Dynamic) {}
				}
			}

			if (startblack.alpha != 1) {
				FlxTween.cancelTweensOf(startblack);
				FlxTween.tween(startblack, {alpha: 1}, 0.5, {ease: FlxEase.linear});
				new FlxTimer().start(0.5, () -> {
					startblack.alpha = 1;
				});
			}

			if (darnell.visible != true) {
				new FlxTimer().start(0.5, () -> {
					darnell.visible = true;
					fakeDarnell.visible = false;
				});
			}

			if (PlayState.instance.cameraFollowPoint.x != 1403 || PlayState.instance.cameraFollowPoint.y != 731) {
				PlayState.instance.cancelCameraFollowTween();
				PlayState.instance.cameraFollowPoint.setPosition(1403, 731);
			}

			if (PlayState.instance.currentCameraZoom != 0.75) {
				PlayState.instance.cancelAllCameraTweens();
				PlayState.instance.tweenCameraZoom(0.75, 0.5, FlxEase.linear);
			}
		}
	}

	public function onSongEvent(event):Void {
		super.onSongEvent(event);

		var darnell = PlayState.instance.currentStage.getDad();
		var fakeDarnell = PlayState.instance.currentStage.getNamedProp('fakeDarnell');
		var boyfriend = PlayState.instance.currentStage.getBoyfriend();

		if (event.eventData.eventKind == 'BlazinEvent') {
			var ev = event.eventData.value;

			switch (Std.int(ev.blazinType)) {
				case 0: // begin song fully black, tween to clear
					FlxTween.tween(startblack, {alpha: 0}, 10, {ease: FlxEase.linear});
				case 1: // fade HUD in
					for (element in getHudElements()) {
						try {
							element.alpha = 0;
							element.visible = true;
							FlxTween.cancelTweensOf(element);
							FlxTween.tween(element, {alpha: 1}, 3, {ease: FlxEase.linear});
						} catch (e:Dynamic) {}
					}
				case 2: // fade out game
					FlxTween.tween(startblack, {alpha: 1}, 5, {ease: FlxEase.linear});
				case 3: // swap fake Darnell
					startblack.alpha = 1;
					darnell.visible = false;
					fakeDarnell.visible = true;
				case 4: // fade in
					FlxTween.tween(startblack, {alpha: 0}, 4, {ease: FlxEase.linear});
				case 5: // restore Darnell
					darnell.visible = true;
					fakeDarnell.visible = false;
			}
		}
	}

	function hideOpponentStrumline() {
		var opponentStrumline:FlxSprite = PlayState.instance.opponentStrumline;
		if (opponentStrumline != null) {
			for (arrow in opponentStrumline.members) {
				arrow.visible = false;
			}
		}
	}

	function centerPlayerStrumline() {
		// This is a song gimmick we are never making middlescroll an option.

		var playerStrumline:FlxSprite = PlayState.instance.playerStrumline;
		if (playerStrumline != null) {
			playerStrumline.x = FlxG.width / 2 - playerStrumline.width / 2;
		}
	}

	public override function onSongEnd(event:CountdownScriptEvent):Void {
		super.onSongEnd(event);

		// Keep the cutscene from playing outside of story mode.
		if (!PlayStatePlaylist.isStoryMode)
			hasPlayedCutscene = true;

		if (!hasPlayedCutscene) {
			trace('Pausing ending to play a video cutscene (`blazin`)');

			hasPlayedCutscene = true;

			// Add a black background behind the cutscene to fix a transition bug!
			trace('Adding black background behind cutscene over UI');
			var bgSprite = new FunkinSprite(-100, -100);
			bgSprite.makeSolidColor(2000, 2500, 0xFF000000);
			bgSprite.cameras = [PlayState.instance.camHUD]; // Show over the HUD.
			bgSprite.zIndex = 1000000;
			PlayState.instance.add(bgSprite);
			PlayState.instance.refresh();

			event.cancel(); // CANCEL THE COUNTDOWN!

			startVideo();
		} else {
			// Make sure the cutscene can play again next time!
			hasPlayedCutscene = false;
			// DO NOT CANCEL THE EVENT!
		}
	}

	function startVideo() {
		VideoCutscene.play(Paths.videos('blazinCutscene'), CutsceneType.ENDING);
		// This will call onSongEnd() again so make sure the flag is set!
		hasPlayedCutscene = true;
	}

	function getHudElements():Array<Dynamic> {
		var elements:Array<Dynamic> = [];

		for (spr in PlayState.instance.members) {
			if (spr != null
				&& spr.camera == PlayState.instance.camHUD
				&& spr != startblack
				&& spr != PlayState.instance.playerStrumline
				&& spr != PlayState.instance.opponentStrumline
				&& (PlayState.instance.playerStrumline != null
					&& (!PlayState.instance.playerStrumline.strumlineNotes.members.contains(spr)
						&& !PlayState.instance.playerStrumline.notes.members.contains(spr)
						&& !PlayState.instance.playerStrumline.holdNotes.members.contains(spr)))
				&& (PlayState.instance.opponentStrumline != null
					&& (!PlayState.instance.opponentStrumline.strumlineNotes.members.contains(spr)
						&& !PlayState.instance.opponentStrumline.notes.members.contains(spr)
						&& !PlayState.instance.opponentStrumline.holdNotes.members.contains(spr)))) {
				try {
					if (spr.alpha != null) {
						elements.push(spr);
					}
				} catch (e:Dynamic) {}
			}
		}

		return elements;
	}
}